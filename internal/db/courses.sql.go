// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: courses.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCourses = `-- name: CreateCourses :exec
INSERT INTO courses (id, name, description, category_id, price)
VALUES ($1, $2, $3, $4, $5)
`

type CreateCoursesParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	CategoryID  uuid.UUID
	Price       float64
}

func (q *Queries) CreateCourses(ctx context.Context, arg CreateCoursesParams) error {
	_, err := q.db.ExecContext(ctx, createCourses,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CategoryID,
		arg.Price,
	)
	return err
}

const getCourse = `-- name: GetCourse :one
SELECT c.id, c.category_id, c.name, c.description, c.price, ca.name as category_name FROM courses c
JOIN categories ca ON ca.id = c.category_id
WHERE c.id = $1
`

type GetCourseRow struct {
	ID           uuid.UUID
	CategoryID   uuid.UUID
	Name         string
	Description  sql.NullString
	Price        float64
	CategoryName string
}

func (q *Queries) GetCourse(ctx context.Context, id uuid.UUID) (GetCourseRow, error) {
	row := q.db.QueryRowContext(ctx, getCourse, id)
	var i GetCourseRow
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CategoryName,
	)
	return i, err
}

const listCourses = `-- name: ListCourses :many
SELECT c.id, c.category_id, c.name, c.description, c.price, ca.name as category_name FROM courses c
JOIN categories ca ON ca.id = c.category_id
`

type ListCoursesRow struct {
	ID           uuid.UUID
	CategoryID   uuid.UUID
	Name         string
	Description  sql.NullString
	Price        float64
	CategoryName string
}

func (q *Queries) ListCourses(ctx context.Context) ([]ListCoursesRow, error) {
	rows, err := q.db.QueryContext(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCoursesRow
	for rows.Next() {
		var i ListCoursesRow
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
